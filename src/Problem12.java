//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//        Let us list the factors of the first seven triangle numbers:
//
//        1: 1
//        3: 1,3
//        6: 1,2,3,6
//        10: 1,2,5,10
//        15: 1,3,5,15
//        21: 1,3,7,21
//        28: 1,2,4,7,14,28
//        We can see that 28 is the first triangle number to have over five divisors.
//
//        What is the value of the first triangle number to have over five hundred divisors?

public class Problem12 {

    public static int solve() {

        int[] primeList = eSieve(75000);

        int value = 0;
        for (int i = 0; ; i++) {
            value += i;
            if (getNumberOfDivisors(value, primeList) >= 500) {
                return value;
            }
        }

    }

    private static int getNumberOfDivisors(int number, int[] primeList) {
        int nod = 1;
        int exponent;
        int remain = number;

        for (int i = 0; i < primeList.length; i++) {
            // In case there is a remainder this is a prime factor as well
            // The exponent of that factor is 1
            if (primeList[i] * primeList[i] > number) {
                return nod * 2;
            }

            exponent = 1;
            while (remain % primeList[i] == 0) {
                exponent++;
                remain = remain / primeList[i];
            }
            nod *= exponent;

            //If there is no remainder, return the count
            if (remain == 1) {
                return nod;
            }
        }
        return nod;
    }

    private static int[] eSieve(int N) {
        boolean[] primes = new boolean[N + 1];
        int result[] = new int[N];
        for (int i = 2; i <= N; i++) {
            primes[i] = true;
        }
        for (int i = 2; i * i <= N; i++) {
            if (primes[i]) {
                for (int j = i; i * j <= N; j++) {
                    primes[i * j] = false;
                }
            }
        }

        int j = 0;
        for (int i = 2; i <= N; i++) {
            if (primes[i]) {
                result[j++] = i;
            }
        }
        return result;
    }


}
